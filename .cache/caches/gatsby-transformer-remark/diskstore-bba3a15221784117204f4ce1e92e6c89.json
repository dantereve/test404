{"expireTime":9007200825219936000,"key":"transformer-remark-markdown-html-ast-f2154fcdc504fcb7276560008bbbfff3-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL comes from the same family as React. And React is functional and reactive.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":83,"offset":83}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":83,"offset":83}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!--more-->","position":{"start":{"line":4,"column":1,"offset":85},"end":{"line":4,"column":12,"offset":96}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A quick investigation is necessary.","position":{"start":{"line":6,"column":1,"offset":98},"end":{"line":6,"column":36,"offset":133}}}],"position":{"start":{"line":6,"column":1,"offset":98},"end":{"line":6,"column":36,"offset":133}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"A short history","position":{"start":{"line":8,"column":4,"offset":138},"end":{"line":8,"column":19,"offset":153}}}],"position":{"start":{"line":8,"column":1,"offset":135},"end":{"line":8,"column":19,"offset":153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL was developed by Facebook at the same time when React was created. Perhaps they were meant to be perfect running mates.","position":{"start":{"line":10,"column":1,"offset":155},"end":{"line":10,"column":128,"offset":282}}}],"position":{"start":{"line":10,"column":1,"offset":155},"end":{"line":10,"column":128,"offset":282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Both of them define a new era in their own domain: React in web frameworks and GraphQL in APIs. ","position":{"start":{"line":12,"column":1,"offset":284},"end":{"line":12,"column":97,"offset":380}}}],"position":{"start":{"line":12,"column":1,"offset":284},"end":{"line":12,"column":97,"offset":380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The list of features on ","position":{"start":{"line":14,"column":1,"offset":382},"end":{"line":14,"column":25,"offset":406}}},{"type":"element","tagName":"a","properties":{"href":"https://graphql.org/"},"children":[{"type":"text","value":"GraphQL.org","position":{"start":{"line":14,"column":26,"offset":407},"end":{"line":14,"column":37,"offset":418}}}],"position":{"start":{"line":14,"column":25,"offset":406},"end":{"line":14,"column":60,"offset":441}}},{"type":"text","value":" clearly points to a paradigm shift:","position":{"start":{"line":14,"column":60,"offset":441},"end":{"line":14,"column":96,"offset":477}}}],"position":{"start":{"line":14,"column":1,"offset":382},"end":{"line":14,"column":96,"offset":477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Ask for what you need, get exactly that","position":{"start":{"line":16,"column":3,"offset":481},"end":{"line":16,"column":42,"offset":520}}}],"position":{"start":{"line":16,"column":1,"offset":479},"end":{"line":16,"column":42,"offset":520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Get many resources in a single request","position":{"start":{"line":17,"column":3,"offset":523},"end":{"line":17,"column":41,"offset":561}}}],"position":{"start":{"line":17,"column":1,"offset":521},"end":{"line":17,"column":41,"offset":561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Describe what’s possible with a type system","position":{"start":{"line":18,"column":3,"offset":564},"end":{"line":18,"column":46,"offset":607}}}],"position":{"start":{"line":18,"column":1,"offset":562},"end":{"line":18,"column":46,"offset":607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Evolve your API without versions","position":{"start":{"line":19,"column":3,"offset":610},"end":{"line":19,"column":35,"offset":642}}}],"position":{"start":{"line":19,"column":1,"offset":608},"end":{"line":19,"column":35,"offset":642}}},{"type":"text","value":"\n"}],"position":{"start":{"line":16,"column":1,"offset":479},"end":{"line":19,"column":35,"offset":642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React ","position":{"start":{"line":21,"column":1,"offset":644},"end":{"line":21,"column":7,"offset":650}}},{"type":"element","tagName":"a","properties":{"href":"http://metamn.io/react/react-follows-the-functional-reactive-programming-paradigm/"},"children":[{"type":"text","value":"managed","position":{"start":{"line":21,"column":8,"offset":651},"end":{"line":21,"column":15,"offset":658}}}],"position":{"start":{"line":21,"column":7,"offset":650},"end":{"line":21,"column":100,"offset":743}}},{"type":"text","value":" to change the status quo by embracing functional reactive programming. One might wonder if GraphQL choose the same approach.","position":{"start":{"line":21,"column":100,"offset":743},"end":{"line":21,"column":225,"offset":868}}}],"position":{"start":{"line":21,"column":1,"offset":644},"end":{"line":21,"column":225,"offset":868}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Functional reactive programming","position":{"start":{"line":23,"column":4,"offset":873},"end":{"line":23,"column":35,"offset":904}}}],"position":{"start":{"line":23,"column":1,"offset":870},"end":{"line":23,"column":35,"offset":904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What makes a system functional and reactive is extracted in the list below from Daniel Lew’s excellent article ","position":{"start":{"line":25,"column":1,"offset":906},"end":{"line":25,"column":112,"offset":1017}}},{"type":"element","tagName":"a","properties":{"href":"https://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/"},"children":[{"type":"text","value":"An Introduction to Functional Reactive Programming","position":{"start":{"line":25,"column":113,"offset":1018},"end":{"line":25,"column":163,"offset":1068}}}],"position":{"start":{"line":25,"column":112,"offset":1017},"end":{"line":25,"column":252,"offset":1157}}},{"type":"text","value":".","position":{"start":{"line":25,"column":252,"offset":1157},"end":{"line":25,"column":253,"offset":1158}}}],"position":{"start":{"line":25,"column":1,"offset":906},"end":{"line":25,"column":253,"offset":1158}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Acronym R stands for reactive, F for functional programming.","position":{"start":{"line":27,"column":1,"offset":1160},"end":{"line":27,"column":61,"offset":1220}}}],"position":{"start":{"line":27,"column":1,"offset":1160},"end":{"line":27,"column":61,"offset":1220}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">|---------|-------------|-------------------------------------------------------------------------|\n| Acronym | Feature     | Description                                                             |\n|---------|-------------|-------------------------------------------------------------------------|\n| R-1     | Isolation   | Components are aware of, and care about their own problems only         |\n| R-2     | Isolation   | Components does not interfere with each other’s inner workings          |\n| R-3     | Async       | Components communicate in an asynchronously                             |\n| F-1     | Composition | Components have clear and stable interfaces                             |\n| F-2     | Composition | During execution a component doesn&#39;t modify its input parameters        |\n| F-3     | Composition | No external information is used to produce the return value             |\n| F-4     | Composition | No additional operations are performed beside the planned functionality |</code></pre></div>","position":{"start":{"line":29,"column":1,"offset":1222},"end":{"line":40,"column":4,"offset":2229}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If GraphQL meets these features it can be considered functional and reactive.","position":{"start":{"line":42,"column":1,"offset":2231},"end":{"line":42,"column":78,"offset":2308}}}],"position":{"start":{"line":42,"column":1,"offset":2231},"end":{"line":42,"column":78,"offset":2308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"How GraphQL works","position":{"start":{"line":44,"column":4,"offset":2313},"end":{"line":44,"column":21,"offset":2330}}}],"position":{"start":{"line":44,"column":1,"offset":2310},"end":{"line":44,"column":22,"offset":2331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Like every API ","position":{"start":{"line":46,"column":1,"offset":2333},"end":{"line":46,"column":16,"offset":2348}}},{"type":"text","value":"—","position":{"start":{"line":46,"column":16,"offset":2348},"end":{"line":46,"column":23,"offset":2355}}},{"type":"text","value":" GraphQL is built on three main concepts:","position":{"start":{"line":46,"column":23,"offset":2355},"end":{"line":46,"column":64,"offset":2396}}}],"position":{"start":{"line":46,"column":1,"offset":2333},"end":{"line":46,"column":64,"offset":2396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Client","position":{"start":{"line":48,"column":5,"offset":2402},"end":{"line":48,"column":11,"offset":2408}}}],"position":{"start":{"line":48,"column":3,"offset":2400},"end":{"line":48,"column":13,"offset":2410}}},{"type":"text","value":": makes data requests to a backend","position":{"start":{"line":48,"column":13,"offset":2410},"end":{"line":48,"column":47,"offset":2444}}}],"position":{"start":{"line":48,"column":1,"offset":2398},"end":{"line":48,"column":47,"offset":2444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Endpoint","position":{"start":{"line":49,"column":5,"offset":2449},"end":{"line":49,"column":13,"offset":2457}}}],"position":{"start":{"line":49,"column":3,"offset":2447},"end":{"line":49,"column":15,"offset":2459}}},{"type":"text","value":": One or more URLs where requests are sent and from where the results are received","position":{"start":{"line":49,"column":15,"offset":2459},"end":{"line":49,"column":97,"offset":2541}}}],"position":{"start":{"line":49,"column":1,"offset":2445},"end":{"line":49,"column":97,"offset":2541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Backend","position":{"start":{"line":50,"column":5,"offset":2546},"end":{"line":50,"column":12,"offset":2553}}}],"position":{"start":{"line":50,"column":3,"offset":2544},"end":{"line":50,"column":14,"offset":2555}}},{"type":"text","value":": Processes the requests and returns data","position":{"start":{"line":50,"column":14,"offset":2555},"end":{"line":50,"column":55,"offset":2596}}}],"position":{"start":{"line":50,"column":1,"offset":2542},"end":{"line":50,"column":55,"offset":2596}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":2398},"end":{"line":50,"column":55,"offset":2596}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Speaking in code (GraphQL):","position":{"start":{"line":52,"column":1,"offset":2598},"end":{"line":52,"column":28,"offset":2625}}}],"position":{"start":{"line":52,"column":1,"offset":2598},"end":{"line":52,"column":28,"offset":2625}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># The client sends a data request to the backend</span>\n<span class=\"token comment\">#</span>\nGET /graphql?query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> book<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> title, author <span class=\"token punctuation\">{</span> firstName <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `/graphql` is an endpoint which receives the request ...</span>\n<span class=\"token comment\"># ... and forwards to the backend</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `{ title, author { firstName } }` is the shape of data ...</span>\n<span class=\"token comment\"># ... the clients wants to receive</span></code></pre></div>","position":{"start":{"line":54,"column":1,"offset":2627},"end":{"line":64,"column":4,"offset":2951}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * The backend processes the request using resolvers\n * ... and returns the results\n */</span>  \n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Author<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">books</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> authorId<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":66,"column":1,"offset":2953},"end":{"line":79,"column":4,"offset":3232}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Finally the client receives the result.\n * \n * The result has the shape defined by the client at request\n */</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Black Hole Blues\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Janna\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":81,"column":1,"offset":3234},"end":{"line":93,"column":4,"offset":3439}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Calling the client, the endpoint and the backend as ","position":{"start":{"line":95,"column":1,"offset":3441},"end":{"line":95,"column":53,"offset":3493}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"components","position":{"start":{"line":95,"column":54,"offset":3494},"end":{"line":95,"column":64,"offset":3504}}}],"position":{"start":{"line":95,"column":53,"offset":3493},"end":{"line":95,"column":65,"offset":3505}}},{"type":"text","value":" of the GraphQL system it can be verified if they fulfill the traits of a functional reactive system. ","position":{"start":{"line":95,"column":65,"offset":3505},"end":{"line":95,"column":167,"offset":3607}}}],"position":{"start":{"line":95,"column":1,"offset":3441},"end":{"line":95,"column":167,"offset":3607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Isolation","position":{"start":{"line":97,"column":4,"offset":3612},"end":{"line":97,"column":13,"offset":3621}}}],"position":{"start":{"line":97,"column":1,"offset":3609},"end":{"line":97,"column":13,"offset":3621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL components are (clearly) decoupled. They all work in isolation and don’t interfere in each other’s inner workings.","position":{"start":{"line":99,"column":1,"offset":3623},"end":{"line":99,"column":123,"offset":3745}}}],"position":{"start":{"line":99,"column":1,"offset":3623},"end":{"line":99,"column":123,"offset":3745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These statements can be further articulated with another example using REST, the predecessor of GraphQL. ","position":{"start":{"line":101,"column":1,"offset":3747},"end":{"line":101,"column":106,"offset":3852}}}],"position":{"start":{"line":101,"column":1,"offset":3747},"end":{"line":101,"column":106,"offset":3852}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Speaking code, again, the original example above in REST is:","position":{"start":{"line":103,"column":1,"offset":3854},"end":{"line":103,"column":61,"offset":3914}}}],"position":{"start":{"line":103,"column":1,"offset":3854},"end":{"line":103,"column":61,"offset":3914}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># The client sends a data request to the backend</span>\n<span class=\"token comment\">#</span>\nGET /books/1\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `/books` is an endpoint which receives the request</span>\n<span class=\"token comment\"># The client needs to know in advance if there is a `/books` endpoint.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># More, if it wants to retrieve `authors`, `comments`, ... </span>\n<span class=\"token comment\"># ... it needs to know in advance if these endpoints exists.</span>\n<span class=\"token comment\"># Like:</span>\n<span class=\"token comment\"># - GET /authors/1</span>\n<span class=\"token comment\"># - GET /comments/1</span>\n<span class=\"token comment\"># - GET /authors/1/comments</span>\n<span class=\"token comment\"># - ... and lots of others for POST, DELETE and REST verbs.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># 🢥 In REST the client is tightly coupled ...</span>\n<span class=\"token comment\"># ... to the URL endpoints</span></code></pre></div>","position":{"start":{"line":105,"column":1,"offset":3916},"end":{"line":123,"column":4,"offset":4451}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * The backend processes the request using URL handlers\n * \n * For every resource (`book`, `author`, ...) and \n * operation (`get`, `delete') there should be \n * a corresponding URL handler\n * \n * Like:\n *  - app.get('books', ...)\n *  - app.get('authors', ...)\n *  - app.get('comments', ...)\n *  - ... and lots of others for `put`, `delete`, `post`, `patch`\n * \n * 🢥 In REST the URL endpoints are tightly coupled to ...\n * ... the URL handlers on the backend\n */</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/books'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> book<span class=\"token punctuation\">.</span>authorID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">/**\n  * The shape of the return data needs to be assembled.\n  * And it is done arbitrarily.\n  * The client has no influence about the shape returned.\n  */</span> \n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t  title<span class=\"token punctuation\">:</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n\t  author<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t  firstName<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span>\n\t\t  lastName<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">.</span>lastName\n\t  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":125,"column":1,"offset":4453},"end":{"line":160,"column":4,"offset":5389}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Finally the client receives the result.\n * \n * The result has a shape defined by the backend\n * \n * In REST the client is tightly coupled to the backend.\n */</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Black Hole Blues\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Janna\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Levin\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":162,"column":1,"offset":5391},"end":{"line":177,"column":4,"offset":5670}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping up","position":{"start":{"line":179,"column":5,"offset":5676},"end":{"line":179,"column":16,"offset":5687}}}],"position":{"start":{"line":179,"column":1,"offset":5672},"end":{"line":179,"column":16,"offset":5687}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># REST</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># - All three components have a quasi 1-to-1 relationship</span>\n<span class=\"token comment\"># - They are all tightly coupled (The list can't be reduced)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token operator\">|</span>------------------------------------------------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Client requests <span class=\"token operator\">|</span> URL Endpoints <span class=\"token operator\">|</span> URL Handlers             <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>-----------------<span class=\"token operator\">|</span>---------------<span class=\"token operator\">|</span>--------------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /books/1    <span class=\"token operator\">|</span> /books        <span class=\"token operator\">|</span> app.get<span class=\"token punctuation\">(</span><span class=\"token string\">'books'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /authors/1  <span class=\"token operator\">|</span> /authors      <span class=\"token operator\">|</span> app.get<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /comments/1 <span class=\"token operator\">|</span> /comments     <span class=\"token operator\">|</span> app.get<span class=\"token punctuation\">(</span><span class=\"token string\">'comments'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> DELETE /books/1 <span class=\"token operator\">|</span> /books        <span class=\"token operator\">|</span> app.delete<span class=\"token punctuation\">(</span><span class=\"token string\">'books'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>------------------------------------------------------------<span class=\"token operator\">|</span></code></pre></div>","position":{"start":{"line":181,"column":1,"offset":5689},"end":{"line":195,"column":4,"offset":6334}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># GraphQL</span>\n<span class=\"token comment\">#</span>\n<span class=\"token operator\">|</span>---------------------------------------------------------------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Client requests                       <span class=\"token operator\">|</span> URL Endpoints <span class=\"token operator\">|</span> URL handlers      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>---------------------------------------<span class=\"token operator\">|</span>---------------<span class=\"token operator\">|</span>-------------------<span class=\"token operator\">|</span> \n<span class=\"token operator\">|</span> GET /graphql?query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>book<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>    <span class=\"token operator\">|</span> /graphql      <span class=\"token operator\">|</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /graphql?query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>  <span class=\"token operator\">|</span> /graphql      <span class=\"token operator\">|</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /graphql?query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> /graphql      <span class=\"token operator\">|</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /graphql?mutation<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>book<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> /graphql      <span class=\"token operator\">|</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>---------------------------------------------------------------------------<span class=\"token operator\">|</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># - All components above can be further reduced</span>\n<span class=\"token comment\"># - Which makes them loosely coupled</span>\n<span class=\"token comment\">#</span>\n<span class=\"token operator\">|</span> GET /graphql?<span class=\"token operator\">&lt;</span>OPERATION<span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>PARAMS<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>    <span class=\"token operator\">|</span> /graphql      <span class=\"token operator\">|</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span></code></pre></div>","position":{"start":{"line":197,"column":1,"offset":6336},"end":{"line":213,"column":4,"offset":7152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Or, illustrated with a diagram:","position":{"start":{"line":215,"column":1,"offset":7154},"end":{"line":215,"column":32,"offset":7185}}}],"position":{"start":{"line":215,"column":1,"offset":7154},"end":{"line":215,"column":32,"offset":7185}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># REST</span>\n<span class=\"token comment\">#</span>\n<span class=\"token operator\">|</span>-----------------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-----------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-----------------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Client          <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span> Endpoints <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span> Handlers                    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>-----------------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-----------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-----------------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /books/1    <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> /books    <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> app.get<span class=\"token punctuation\">(</span><span class=\"token string\">'books'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /authors/1  <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> /authors  <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> app.get<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>     <span class=\"token operator\">|</span>       \n<span class=\"token operator\">|</span> GET /comments/1 <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> /comments <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> app.get<span class=\"token punctuation\">(</span><span class=\"token string\">'comments'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> DELETE /books/1 <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> /books    <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> app.delete<span class=\"token punctuation\">(</span><span class=\"token string\">'books'</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>-----------------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-----------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-----------------------------<span class=\"token operator\">|</span>\n\n<span class=\"token comment\"># GraphQL</span>\n<span class=\"token comment\">#</span>\n<span class=\"token operator\">|</span>---------------------------------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>----------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> Client                          <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span> Endpoint <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span> Resolvers         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>---------------------------------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>----------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-------------------<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /graphql?query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span>        <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> GET /graphql?mutation<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span>     <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> /graphql <span class=\"token operator\">|</span> <span class=\"token operator\">&lt;</span>-----<span class=\"token operator\">></span> <span class=\"token operator\">|</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span>       \n<span class=\"token operator\">|</span> GET /graphql?subscription<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>---------------------------------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>----------<span class=\"token operator\">|</span>         <span class=\"token operator\">|</span>-------------------<span class=\"token operator\">|</span></code></pre></div>","position":{"start":{"line":217,"column":1,"offset":7187},"end":{"line":238,"column":4,"offset":8499}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Composition","position":{"start":{"line":240,"column":4,"offset":8504},"end":{"line":240,"column":15,"offset":8515}}}],"position":{"start":{"line":240,"column":1,"offset":8501},"end":{"line":240,"column":15,"offset":8515}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s examine again the two ways of writing code on the backend:","position":{"start":{"line":242,"column":1,"offset":8517},"end":{"line":242,"column":65,"offset":8581}}}],"position":{"start":{"line":242,"column":1,"offset":8517},"end":{"line":242,"column":65,"offset":8581}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * GraphQL\n */</span>  \n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Author<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">books</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> authorId<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":244,"column":1,"offset":8583},"end":{"line":256,"column":4,"offset":8789}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * REST\n */</span> \napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/books'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> book<span class=\"token punctuation\">.</span>authorID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t  title<span class=\"token punctuation\">:</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n\t  author<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t  firstName<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span>\n\t\t  lastName<span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">.</span>lastName\n\t  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":258,"column":1,"offset":8791},"end":{"line":275,"column":4,"offset":9116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first approach seem to be pure functional while the second procedural.","position":{"start":{"line":277,"column":1,"offset":9118},"end":{"line":277,"column":75,"offset":9192}}}],"position":{"start":{"line":277,"column":1,"offset":9118},"end":{"line":277,"column":75,"offset":9192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Both of them seem to satisfy conditions F-1 and F-2: stable interfaces, and input parameters kept unmodified.","position":{"start":{"line":279,"column":1,"offset":9194},"end":{"line":279,"column":110,"offset":9303}}}],"position":{"start":{"line":279,"column":1,"offset":9194},"end":{"line":279,"column":110,"offset":9303}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Only GraphQL seem to satisfy conditions F-3, F-4: Use no external information nor additional operations.","position":{"start":{"line":281,"column":1,"offset":9305},"end":{"line":281,"column":105,"offset":9409}}}],"position":{"start":{"line":281,"column":1,"offset":9305},"end":{"line":281,"column":105,"offset":9409}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"REST uses an external resource (","position":{"start":{"line":283,"column":1,"offset":9411},"end":{"line":283,"column":33,"offset":9443}}},{"type":"raw","value":"<code class=\"language-text\">authors</code>","position":{"start":{"line":283,"column":33,"offset":9443},"end":{"line":283,"column":42,"offset":9452}}},{"type":"text","value":") and performs an additional operation (","position":{"start":{"line":283,"column":42,"offset":9452},"end":{"line":283,"column":82,"offset":9492}}},{"type":"raw","value":"<code class=\"language-text\">const result=</code>","position":{"start":{"line":283,"column":82,"offset":9492},"end":{"line":283,"column":97,"offset":9507}}},{"type":"text","value":") during execution.","position":{"start":{"line":283,"column":97,"offset":9507},"end":{"line":283,"column":116,"offset":9526}}}],"position":{"start":{"line":283,"column":1,"offset":9411},"end":{"line":283,"column":116,"offset":9526}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Finally","position":{"start":{"line":286,"column":4,"offset":9532},"end":{"line":286,"column":11,"offset":9539}}}],"position":{"start":{"line":286,"column":1,"offset":9529},"end":{"line":286,"column":12,"offset":9540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This thought-play can be easily called ","position":{"start":{"line":288,"column":1,"offset":9542},"end":{"line":288,"column":40,"offset":9581}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"speculation","position":{"start":{"line":288,"column":41,"offset":9582},"end":{"line":288,"column":52,"offset":9593}}}],"position":{"start":{"line":288,"column":40,"offset":9581},"end":{"line":288,"column":53,"offset":9594}}},{"type":"text","value":" by a rigorous reader. ","position":{"start":{"line":288,"column":53,"offset":9594},"end":{"line":288,"column":76,"offset":9617}}}],"position":{"start":{"line":288,"column":1,"offset":9542},"end":{"line":288,"column":76,"offset":9617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example the code for ","position":{"start":{"line":290,"column":1,"offset":9619},"end":{"line":290,"column":26,"offset":9644}}},{"type":"raw","value":"<code class=\"language-text\">app.get(&#39;/books&#39;, ...)</code>","position":{"start":{"line":290,"column":26,"offset":9644},"end":{"line":290,"column":50,"offset":9668}}},{"type":"text","value":" can be written to be fully functional.\nHowever this is the way you’ll find it written in majority of REST APIs. ","position":{"start":{"line":290,"column":50,"offset":9668},"end":{"line":291,"column":74,"offset":9781}}}],"position":{"start":{"line":290,"column":1,"offset":9619},"end":{"line":291,"column":74,"offset":9781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The goal of this document was never to demonstrate scientifically GraphQL follows the functional reactive pardigm.","position":{"start":{"line":293,"column":1,"offset":9783},"end":{"line":293,"column":115,"offset":9897}}}],"position":{"start":{"line":293,"column":1,"offset":9783},"end":{"line":293,"column":115,"offset":9897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The goal was to check if GraphQL can be interpreted using the paradigm.","position":{"start":{"line":295,"column":1,"offset":9899},"end":{"line":295,"column":72,"offset":9970}}}],"position":{"start":{"line":295,"column":1,"offset":9899},"end":{"line":295,"column":72,"offset":9970}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the end the reader has to decide in what measure this exercise was successful. ","position":{"start":{"line":297,"column":1,"offset":9972},"end":{"line":297,"column":83,"offset":10054}}}],"position":{"start":{"line":297,"column":1,"offset":9972},"end":{"line":297,"column":83,"offset":10054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Until then ","position":{"start":{"line":299,"column":1,"offset":10056},"end":{"line":299,"column":12,"offset":10067}}},{"type":"text","value":"—","position":{"start":{"line":299,"column":12,"offset":10067},"end":{"line":299,"column":19,"offset":10074}}},{"type":"text","value":" I hope ","position":{"start":{"line":299,"column":19,"offset":10074},"end":{"line":299,"column":27,"offset":10082}}},{"type":"text","value":"—","position":{"start":{"line":299,"column":27,"offset":10082},"end":{"line":299,"column":34,"offset":10089}}},{"type":"text","value":" one can have a nice overview of the paradigm, and a glimpse on how GraphQL APIs differ from REST.","position":{"start":{"line":299,"column":34,"offset":10089},"end":{"line":299,"column":132,"offset":10187}}}],"position":{"start":{"line":299,"column":1,"offset":10056},"end":{"line":299,"column":132,"offset":10187}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Resources","position":{"start":{"line":301,"column":4,"offset":10192},"end":{"line":301,"column":13,"offset":10201}}}],"position":{"start":{"line":301,"column":1,"offset":10189},"end":{"line":301,"column":13,"offset":10201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/GraphQL"},"children":[{"type":"text","value":"GraphQL","position":{"start":{"line":303,"column":4,"offset":10206},"end":{"line":303,"column":11,"offset":10213}}}],"position":{"start":{"line":303,"column":3,"offset":10205},"end":{"line":303,"column":51,"offset":10253}}}],"position":{"start":{"line":303,"column":1,"offset":10203},"end":{"line":303,"column":51,"offset":10253}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/React_(web_framework)"},"children":[{"type":"text","value":"React (web framework)","position":{"start":{"line":304,"column":4,"offset":10257},"end":{"line":304,"column":25,"offset":10278}}}],"position":{"start":{"line":304,"column":3,"offset":10256},"end":{"line":304,"column":79,"offset":10332}}}],"position":{"start":{"line":304,"column":1,"offset":10254},"end":{"line":304,"column":79,"offset":10332}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://metamn.io/react/react-follows-the-functional-reactive-programming-paradigm/"},"children":[{"type":"text","value":"React follows the functional reactive programming paradigm","position":{"start":{"line":305,"column":4,"offset":10336},"end":{"line":305,"column":62,"offset":10394}}}],"position":{"start":{"line":305,"column":3,"offset":10335},"end":{"line":305,"column":147,"offset":10479}}}],"position":{"start":{"line":305,"column":1,"offset":10333},"end":{"line":305,"column":147,"offset":10479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/"},"children":[{"type":"text","value":"An Introduction to Functional Reactive Programming","position":{"start":{"line":306,"column":4,"offset":10483},"end":{"line":306,"column":54,"offset":10533}}}],"position":{"start":{"line":306,"column":3,"offset":10482},"end":{"line":306,"column":143,"offset":10622}}}],"position":{"start":{"line":306,"column":1,"offset":10480},"end":{"line":306,"column":143,"offset":10622}}},{"type":"text","value":"\n"}],"position":{"start":{"line":303,"column":1,"offset":10203},"end":{"line":306,"column":143,"offset":10622}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":306,"column":143,"offset":10622}}}}